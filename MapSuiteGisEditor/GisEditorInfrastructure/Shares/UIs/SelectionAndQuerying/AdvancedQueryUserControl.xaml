<UserControl
    x:Class="ThinkGeo.MapSuite.GisEditor.AdvancedQueryUserControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:ThinkGeo.MapSuite.GisEditor"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:wpfex="clr-namespace:ThinkGeo.MapSuite.WpfDesktop.Extension;assembly=ThinkGeo.MapSuite.WpfDesktop.Extension"
    d:DesignHeight="300"
    d:DesignWidth="450"
    x:ClassModifier="internal"
    Unloaded="UserControl_Unloaded"
    mc:Ignorable="d">
    <Grid>
        <Grid.Resources>
            <local:HasItemsToVisibilityConverter x:Key="toVisibilityConverter" />
            <Style TargetType="TextBlock">
                <Setter Property="Margin" Value="0,0,5,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <ObjectDataProvider
                x:Key="QueryMatchModeProvider"
                MethodName="GetValues"
                ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="local:QueryMatchMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider
                x:Key="AddHighlightFeaturesMode"
                MethodName="GetValues"
                ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="wpfex:AddHighlightFeaturesMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <local:QueryMatchModeToNameConverter x:Key="QueryMatchModeToNameConverter" />
            <local:HighlightModeToMessageConverter x:Key="HighlightModeToMessageConverter" />
            <local:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" />
            <local:ObjectToVisibilityConverter x:Key="ReversedObjectToVisibilityConverter" IsReversed="True" />
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" MinHeight="200" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="{DynamicResource FindFeaturesWindowAdvancedQueryMatch}" />
            <ComboBox
                Name="MatchComboBox"
                Grid.Column="1"
                Margin="0,0,5,0"
                IsEnabled="{Binding IsQueryMatchModeEnabled}"
                ItemsSource="{Binding Source={StaticResource QueryMatchModeProvider}}"
                SelectedItem="{Binding SelectedQueryMatchMode, Mode=TwoWay}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource QueryMatchModeToNameConverter}}" />
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <TextBlock Grid.Column="2" Text="{DynamicResource FindFeaturesWindowAdvancedQueryFollowingQueryCondition}" />
            <Button
                Grid.Column="3"
                HorizontalAlignment="Right"
                Command="{Binding AddConditionCommand}"
                Content="{DynamicResource FindFeaturesWindowAdvancedQueryAddCondition}" />
        </Grid>
        <ListBox
            x:Name="conditionsListBox"
            Grid.Row="1"
            Margin="5"
            HorizontalContentAlignment="Stretch"
            ItemsSource="{Binding Conditions}">
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <EventSetter Event="MouseDoubleClick" Handler="ListBoxItem_MouseDoubleClick" />
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="LightGray" BorderThickness="1">
                        <Grid Margin="0,1,0,1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding ReadableText}" />
                            <Grid
                                Grid.Column="1"
                                Width="50"
                                Height="20"
                                HorizontalAlignment="Right">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <Button
                                    Grid.Column="0"
                                    Margin="0,0,5,0"
                                    Command="{Binding ElementName=conditionsListBox, Path=DataContext.EditConditionCommand}"
                                    CommandParameter="{Binding}">
                                    <Image Source="/GisEditorInfrastructure;component/Images/dialogs_Edit.png" />
                                </Button>
                                <Button
                                    Grid.Column="1"
                                    Command="{Binding ElementName=conditionsListBox, Path=DataContext.DeleteConditionCommand}"
                                    CommandParameter="{Binding}">
                                    <Image Source="/GisEditorInfrastructure;component/Images/dialogs_delete.png" />
                                </Button>
                            </Grid>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <TextBlock
            Grid.Row="1"
            Margin="10"
            VerticalAlignment="Stretch"
            FontStyle="Oblique"
            FontWeight="Light"
            Text="{DynamicResource FindFeaturesWindowAdvancedQueryNoCondition}"
            Visibility="{Binding ElementName=conditionsListBox, Path=HasItems, Mode=OneWay, Converter={StaticResource ResourceKey=toVisibilityConverter}}" />
        <Grid
            x:Name="originalGrid"
            Grid.Row="2"
            Margin="4"
            Visibility="{Binding SelectedLayer, Converter={StaticResource ReversedObjectToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <ComboBox
                Name="highlightModeComboBox"
                Grid.Column="0"
                ItemsSource="{Binding Source={StaticResource AddHighlightFeaturesMode}}"
                SelectedItem="{Binding HighlightMode, Mode=TwoWay}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource HighlightModeToMessageConverter}}" />
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <Button
                Grid.Column="1"
                Command="{Binding FindCommand}"
                Content="{DynamicResource GeneralFindContent}"
                IsDefault="True"
                IsEnabled="{Binding ElementName=conditionsListBox, Mode=OneWay, Path=HasItems}"
                Style="{DynamicResource ConfigurationButtonStyle}" />
            <Button
                Grid.Column="2"
                Command="{Binding CancelCommand}"
                Content="{DynamicResource ConfigurationCancelLable}"
                IsCancel="True"
                Style="{DynamicResource ConfigurationButtonStyle}" />
        </Grid>
    </Grid>
</UserControl>